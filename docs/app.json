[{"name":"app.R","content":"library(shiny)\n\n# Source UI and Server\nsource(\"ui.R\")\nsource(\"server.R\")\n\n# Run the application \nshinyApp(ui = ui, server = server)\n","type":"text"},{"name":"server.R","content":"server <- function(input, output, session) {\n  dilutionServer(\"dilution1\")\n  mastermixServer(\"mastermix1\")\n  massFromVolumeConcentrationServer(\"mass_calc1\")\n  volumeFromMassConcentrationServer(\"volume_calc1\")\n  molarityFromMassVolumeServer(\"molarity_calc1\")\n  datecalculatorServer(\"date_calc1\")  \n  # dsdna_ug_to_pmol_Server(\"dsdna_ug_to_pmol1\")\n}","type":"text"},{"name":"ui.R","content":"library(shiny)\n\n# Source the modules\nsource(\"dilution_module.R\")\nsource(\"mastermix_module.R\")\nsource(\"mass_from_volume_concentration_module.R\")\nsource(\"volume_from_mass_concentration_module.R\")\nsource(\"molarity_from_mass_volume_module.R\")\nsource(\"date_calculator_module.R\") \n# source(\"dsdna_ug_to_pmol.R\")\n# Add sources for new modules if needed\n\n# Define the UI\nui <- fluidPage(\n  titlePanel(\"Calculator\"),\n  \n  tabsetPanel(\n    tabPanel(\"Dilution Calculator\",\n      fluidRow(\n        column(width = 12,\n          dilutionUI(\"dilution1\"),\n          hr(),\n          textOutput(\"dilution_result\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Mastermix Calculator\",\n      fluidRow(\n        column(width = 12,\n          mastermixUI(\"mastermix1\"),\n          hr(),\n          textOutput(\"mastermix_result\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Mass Calculator\",\n      fluidRow(\n        column(width = 12,\n          massFromVolumeConcentrationUI(\"mass_calc1\"),\n          hr(),\n          textOutput(\"mass_calc_result\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Volume Calculator\",\n      fluidRow(\n        column(width = 12,\n          volumeFromMassConcentrationUI(\"volume_calc1\"),\n          hr(),\n          textOutput(\"volume_calc_result\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Molarity Calculator\",\n      fluidRow(\n        column(width = 12,\n          molarityFromMassVolumeUI(\"molarity_calc1\"),\n          hr(),\n          textOutput(\"molarity_calc_result\")\n        )\n      )\n    ),\n    \n    tabPanel(\"Date Calculator\",\n      fluidRow(\n        column(width = 12,\n          datecalculatorUI(\"date_calc1\")\n        )\n      )\n    ),\n\n    # tabPanel(\"dsDNA µg to pmol Calculator\",\n    #   fluidRow(\n    #     column(width = 12,\n    #       dsdna_ug_to_pmol_UI(\"dsdna_ug_to_pmol1\"),\n    #       hr(),\n    #       textOutput(\"dsdna_ug_to_pmol_result\")\n    #     )\n    #   )\n    # ),\n    \n    # New tab: Ligation Calculators\n    tabPanel(\"Ligation Calculators\",\n      fluidRow(\n        column(width = 12,\n          h3(\"Ligation Calculators Content\"),\n          p(\"This tab provides tools for performing ligations.\"),\n          p(\"Dummy links for more information:\"),\n          tags$a(href = \"#\", \"\"),\n          br(),\n          tags$a(href = \"#\", \"\")\n        )\n      )\n    ),\n    \n    # New tab: Primer Annealing Temp Calculator\n    tabPanel(\"Primer Annealing Temp Calculator\",\n      fluidRow(\n        column(width = 12,\n          h3(\"Primer Annealing Temp Calculator Content\"),\n          p(\"This tab calculates primer annealing temperatures.\"),\n          p(\"Dummy links for more information:\"),\n          tags$a(href = \"https://tmcalculator.neb.com/#!/main\", \"NEB enzymes\", target=\"_blank\"),\n          br(),\n          tags$a(href = \"https://ch.promega.com/resources/tools/biomath/tm-calculator/\", \"Promega Tm Calculator\", target=\"_blank\")\n          \n        )\n      )\n    )\n  )\n)","type":"text"},{"name":"date_calculator_module.R","content":"library(shiny)\nlibrary(lubridate)\n\n# Module UI\ndatecalculatorUI <- function(id) {\n  ns <- NS(id)\n  fluidRow(\n    column(width = 6,\n      h3(\"Date Calculator\"),\n      dateInput(ns(\"start_date\"), \"Start Date\", value = Sys.Date()),\n      numericInput(ns(\"days_to_add_5\"), \"Days to Add 1\", value = 5, min = 0),\n      numericInput(ns(\"days_to_add_15\"), \"Days to Add 2\", value = 15, min = 0),\n      actionButton(ns(\"calculate\"), \"Calculate\"),\n      hr(),\n      fluidRow(\n        column(width = 6,\n          h4(textOutput(ns(\"result_label_5\"))),\n          textOutput(ns(\"result_date_5\")),\n          textOutput(ns(\"days_between_5\"))\n        ),\n        column(width = 6,\n          h4(textOutput(ns(\"result_label_15\"))),\n          textOutput(ns(\"result_date_15\")),\n          textOutput(ns(\"days_between_15\"))\n        )\n      )\n    )\n  )\n}\n\n\n\n\n\n# Module server\ndatecalculatorServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    # Function to calculate end date and days between\n    calculateDates <- function(start_date, days_to_add) {\n      end_date <- start_date + days(days_to_add)\n      days_between <- as.numeric(difftime(end_date, start_date, units = \"days\"))\n      return(list(\n        end_date = end_date,\n        days_between = days_between\n      ))\n    }\n    \n    # Reactive values for results\n    results <- reactiveVal(list(\n      result_5 = NULL,\n      result_15 = NULL\n    ))\n    \n    # Observer for calculating end date and days between when \"Calculate\" is clicked\n    observeEvent(input$calculate, {\n      start_date <- input$start_date\n      days_to_add_5 <- input$days_to_add_5\n      days_to_add_15 <- input$days_to_add_15\n      \n      result_5 <- calculateDates(start_date, days_to_add_5)\n      result_15 <- calculateDates(start_date, days_to_add_15)\n      \n      results(list(\n        result_5 = result_5,\n        result_15 = result_15\n      ))\n    })\n    \n    # Render output for \"Add 5 days\" calculation\n    output$result_label_5 <- renderText({\n      req(results()$result_5)\n      paste(\"End Date (Add\", input$days_to_add_5, \"days):\")\n    })\n    \n    output$result_date_5 <- renderText({\n      req(results()$result_5)\n      format(results()$result_5$end_date, \"%A, %B %d, %Y\")\n    })\n    \n    output$days_between_5 <- renderText({\n      req(results()$result_5)\n      paste(\"Days between:\", results()$result_5$days_between)\n    })\n    \n    # Render output for \"Add 15 days\" calculation\n    output$result_label_15 <- renderText({\n      req(results()$result_15)\n      paste(\"End Date (Add\", input$days_to_add_15, \"days):\")\n    })\n    \n    output$result_date_15 <- renderText({\n      req(results()$result_15)\n      format(results()$result_15$end_date, \"%A, %B %d, %Y\")\n    })\n    \n    output$days_between_15 <- renderText({\n      req(results()$result_15)\n      paste(\"Days between:\", results()$result_15$days_between)\n    })\n    \n  })\n}\n","type":"text"},{"name":"dilution_module.R","content":"library(shiny)\n\n# Module UI\nlibrary(shiny)\n\n# Module UI\nlibrary(shiny)\n\n# Module UI\nlibrary(shiny)\n\n# Module UI\ndilutionUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    radioButtons(ns(\"calc_type\"), \"Calculate:\", choices = list(\"Final Volume (V2)\" = \"v2\", \"Final Concentration (C2)\" = \"c2\")),\n    numericInput(ns(\"c1\"), \"Initial Concentration (C1)\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"c1_unit\"), \"C1 Unit\", choices = c(\"fM\", \"pM\", \"nM\", \"µM\", \"mM\", \"M\", \"%\"), selected = \"µM\"),\n    numericInput(ns(\"v1\"), \"Initial Volume (V1)\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"v1_unit\"), \"V1 Unit\", choices = c(\"fL\", \"pL\", \"nL\", \"µL\", \"mL\", \"L\"), selected = \"µL\"),\n    numericInput(ns(\"target\"), \"Final Concentration (C2) or Final Volume (V2)\", value = 0.1, min = 0, step = 1),\n    selectInput(ns(\"target_unit\"), \"Target Unit\", choices = c(\"fM\", \"pM\", \"nM\", \"µM\", \"mM\", \"M\", \"%\", \"fL\", \"pL\", \"nL\", \"µL\", \"mL\", \"L\"), selected = \"%\"),\n    actionButton(ns(\"calculate\"), \"Calculate\"),\n    hr(),\n    h4(\"Dilution Formula: C1 * V1 = C2 * V2\"),\n    textOutput(ns(\"result\"))\n  )\n}\n\n\n\n\n# Module server\ndilutionServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    # Function to convert concentration to M\n    convert_to_M <- function(value, unit) {\n      switch(unit,\n             \"fM\" = value * 1e-15,\n             \"pM\" = value * 1e-12,\n             \"nM\" = value * 1e-9,\n             \"µM\" = value * 1e-6,\n             \"mM\" = value * 1e-3,\n             \"M\" = value,\n             \"%\" = value / 100)\n    }\n    \n    # Function to convert volume to L\n    convert_to_L <- function(value, unit) {\n      switch(unit,\n             \"fL\" = value * 1e-15,\n             \"pL\" = value * 1e-12,\n             \"nL\" = value * 1e-9,\n             \"µL\" = value * 1e-6,\n             \"mL\" = value * 1e-3,\n             \"L\" = value)\n    }\n    \n    # Function to convert back from M or L to desired unit\n    convert_from_base <- function(value, unit) {\n      switch(unit,\n             \"fM\" = value * 1e15,\n             \"pM\" = value * 1e12,\n             \"nM\" = value * 1e9,\n             \"µM\" = value * 1e6,\n             \"mM\" = value * 1e3,\n             \"M\" = value,\n             \"%\" = value * 100,\n             \"fL\" = value * 1e15,\n             \"pL\" = value * 1e12,\n             \"nL\" = value * 1e9,\n             \"µL\" = value * 1e6,\n             \"mL\" = value * 1e3,\n             \"L\" = value)\n    }\n    \n    observeEvent(input$calculate, {\n      c1 <- convert_to_M(input$c1, input$c1_unit)\n      v1 <- convert_to_L(input$v1, input$v1_unit)\n      target <- if(input$calc_type == \"v2\") convert_to_L(input$target, input$target_unit) else convert_to_M(input$target, input$target_unit)\n      calc_type <- input$calc_type\n      \n      if (calc_type == \"v2\") {\n        # Calculate Final Volume (V2)\n        if (target == 0) {\n          result <- \"Final Concentration (C2) cannot be zero.\"\n        } else {\n          v2 <- (c1 * v1) / target\n          result <- paste(\"Final Volume (V2) is:\", round(convert_from_base(v2, input$target_unit), 2), input$target_unit)\n        }\n      } else {\n        # Calculate Final Concentration (C2)\n        if (target == 0) {\n          result <- \"Final Volume (V2) cannot be zero.\"\n        } else {\n          c2 <- (c1 * v1) / target\n          result <- paste(\"Final Concentration (C2) is:\", round(convert_from_base(c2, input$target_unit), 2), input$target_unit)\n        }\n      }\n      \n      output$result <- renderText({ result })\n    })\n    \n    # Update target unit choices based on calculation type\n    observeEvent(input$calc_type, {\n      if (input$calc_type == \"v2\") {\n        updateSelectInput(session, \"target_unit\", choices = c(\"fL\", \"pL\", \"nL\", \"µL\", \"mL\", \"L\"), selected = \"µL\")\n      } else {\n        updateSelectInput(session, \"target_unit\", choices = c(\"fM\", \"pM\", \"nM\", \"µM\", \"mM\", \"M\", \"%\"), selected = \"µM\")\n      }\n    })\n  })\n}\n\n","type":"text"},{"name":"dsdna_ug_to_pmol.R","content":"library(shiny)\n\n# Module UI\ndsdna_ug_to_pmol_UI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    numericInput(ns(\"dna_amount\"), \"DNA Amount (µg)\", value = 1, min = 0, step = 0.01),\n    numericInput(ns(\"num_nucleotides\"), \"Number of Nucleotides\", value = 1, min = 1, step = 1),\n    actionButton(ns(\"calculate\"), \"Calculate\"),\n    hr(),\n    textOutput(ns(\"result\"))\n  )\n}\n\n# Module server\ndsdna_ug_to_pmol_Server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    ns <- session$ns\n    \n    # Perform calculation\n    observeEvent(input$calculate, {\n      req(input$dna_amount, input$num_nucleotides)\n      \n      dna_amount <- input$dna_amount\n      num_nucleotides <- input$num_nucleotides\n      \n      # Perform the calculation\n      pmol_dna <- dna_amount * (1 / 660) * 10^6 * (1 / num_nucleotides)\n      \n      # Output the result\n      output$result <- renderText({\n        paste(\"Result:\", round(pmol_dna, 2), \"pmol DNA\")\n      })\n    })\n  })\n}","type":"text"},{"name":"mass_from_volume_concentration_module.R","content":"library(shiny)\n\n# Module UI\n# Module UI\nmassFromVolumeConcentrationUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    numericInput(ns(\"volume\"), \"Volume\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"volume_unit\"), \"Volume Unit\", choices = c(\"fL\", \"pL\", \"nL\", \"µL\", \"mL\", \"L\"), selected = \"µL\"),\n    numericInput(ns(\"concentration\"), \"Concentration\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"concentration_unit\"), \"Concentration Unit\", choices = c(\"fg/mL\", \"pg/mL\", \"ng/mL\", \"µg/mL\", \"mg/mL\", \"g/L\", \"fM\", \"pM\", \"nM\", \"µM\", \"mM\", \"M\"), selected = \"mM\"),\n    numericInput(ns(\"molecular_weight\"), \"Molecular Weight (g/mol)\", value = 100, min = 0, step = 1),\n    actionButton(ns(\"calculate\"), \"Calculate Mass\"),\n    hr(),\n    h4(\"Mass = Volume * Concentration\"),\n    textOutput(ns(\"result\"))\n  )\n}\n\n\n# Module server\nmassFromVolumeConcentrationServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    # Function to convert volume to L\n    convert_to_L <- function(value, unit) {\n      switch(unit,\n             \"fL\" = value * 1e-15,\n             \"pL\" = value * 1e-12,\n             \"nL\" = value * 1e-9,\n             \"µL\" = value * 1e-6,\n             \"mL\" = value * 1e-3,\n             \"L\" = value)\n    }\n    \n    # Function to convert concentration to g/L or M\n    convert_to_gL_or_M <- function(value, unit, mw) {\n      switch(unit,\n             \"fg/mL\" = value * 1e-3,\n             \"pg/mL\" = value * 1e-6,\n             \"ng/mL\" = value * 1e-9,\n             \"µg/mL\" = value * 1e-3,\n             \"mg/mL\" = value,\n             \"g/L\" = value,\n             \"fM\" = value * mw * 1e-15,\n             \"pM\" = value * mw * 1e-12,\n             \"nM\" = value * mw * 1e-9,\n             \"µM\" = value * mw * 1e-6,\n             \"mM\" = value * mw * 1e-3,\n             \"M\" = value * mw)\n    }\n    \n    observeEvent(input$calculate, {\n      volume <- convert_to_L(input$volume, input$volume_unit)\n      concentration <- convert_to_gL_or_M(input$concentration, input$concentration_unit, input$molecular_weight)\n      \n      mass <- volume * concentration # mass in grams or moles\n      \n      # Determine appropriate unit for the result\n      if (mass < 1e-15) {\n        result <- paste(\"Mass:\", round(mass * 1e15, 2), \"fg\")\n      } else if (mass < 1e-12) {\n        result <- paste(\"Mass:\", round(mass * 1e12, 2), \"pg\")\n      } else if (mass < 1e-9) {\n        result <- paste(\"Mass:\", round(mass * 1e9, 2), \"ng\")\n      } else if (mass < 1e-6) {\n        result <- paste(\"Mass:\", round(mass * 1e6, 2), \"µg\")\n      } else if (mass < 1e-3) {\n        result <- paste(\"Mass:\", round(mass * 1e3, 2), \"mg\")\n      } else {\n        result <- paste(\"Mass:\", round(mass, 2), \"g\")\n      }\n      \n      output$result <- renderText({ result })\n    })\n  })\n}\n","type":"text"},{"name":"mastermix_module.R","content":"library(shiny)\n\n# Mastermix Module UI\nmastermixUI <- function(id) {\n  ns <- NS(id)\n  fluidRow(\n    column(width = 6,\n      numericInput(ns(\"total_volume\"), \"Volume per Reaction\", value = 50, min = 0, step = 0.1),\n      selectInput(ns(\"volume_unit\"), \"Volume Unit\", choices = c(\"µL\", \"mL\"), selected = \"µL\"),\n      numericInput(ns(\"num_reactions\"), \"Number of Reactions\", value = 1, min = 1, step = 1),\n      actionButton(ns(\"add_component\"), \"Add Component\"),\n      uiOutput(ns(\"components_ui\")),\n      actionButton(ns(\"calculate\"), \"Calculate\")\n    ),\n    column(width = 6,\n      h4(\"Results\"),\n      tableOutput(ns(\"results_table\"))\n    )\n  )\n}\n\n# Mastermix Module Server\nmastermixServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    ns <- session$ns\n    \n    # Reactive values to store components with two default components\n    components <- reactiveVal(data.frame(\n      component = c(\"Component1\", \"Component2\"),\n      input_type = c(\"concentration\", \"concentration\"),\n      stock_conc = c(NA, NA),\n      stock_unit = c(\"µM\", \"µM\"),\n      final_conc = c(NA, NA),\n      final_unit = c(\"µM\", \"µM\"),\n      volume = c(NA, NA),\n      volume_unit = c(\"µL\", \"µL\"),\n      stringsAsFactors = FALSE\n    ))\n    \n    # Observe event to add a new component\n    observeEvent(input$add_component, {\n      current_data <- components()\n      new_id <- paste0(\"Component\", nrow(current_data) + 1)\n      new_data <- rbind(current_data, data.frame(\n        component = new_id,\n        input_type = \"concentration\",\n        stock_conc = NA,\n        stock_unit = \"µM\",\n        final_conc = NA,\n        final_unit = \"µM\",\n        volume = NA,\n        volume_unit = \"µL\",\n        stringsAsFactors = FALSE\n      ))\n      components(new_data)\n    })\n    \n    # Render UI for components\n    output$components_ui <- renderUI({\n      current_data <- components()\n      lapply(seq_len(nrow(current_data)), function(i) {\n        tagList(\n          textInput(ns(paste0(\"component_name_\", i)), \"Component Name\", value = current_data$component[i]),\n          radioButtons(ns(paste0(\"input_type_\", i)), \"Input Type\", \n                       choices = c(\"Concentration\" = \"concentration\", \"Volume\" = \"volume\"), \n                       selected = current_data$input_type[i], inline = TRUE),\n          conditionalPanel(\n            condition = paste0(\"input['\", ns(paste0(\"input_type_\", i)), \"'] == 'concentration'\"),\n            fluidRow(\n              column(6, numericInput(ns(paste0(\"stock_conc_\", i)), \"Stock Concentration\", value = current_data$stock_conc[i], min = 0, step = 0.1)),\n              column(6, selectInput(ns(paste0(\"stock_unit_\", i)), \"Unit\", choices = c(\"µM\", \"mM\"), selected = current_data$stock_unit[i]))\n            ),\n            fluidRow(\n              column(6, numericInput(ns(paste0(\"final_conc_\", i)), \"Final Concentration\", value = current_data$final_conc[i], min = 0, step = 0.1)),\n              column(6, selectInput(ns(paste0(\"final_unit_\", i)), \"Unit\", choices = c(\"µM\", \"mM\"), selected = current_data$final_unit[i]))\n            )\n          ),\n          conditionalPanel(\n            condition = paste0(\"input['\", ns(paste0(\"input_type_\", i)), \"'] == 'volume'\"),\n            fluidRow(\n              column(6, numericInput(ns(paste0(\"volume_\", i)), \"Volume to add\", value = current_data$volume[i], min = 0, step = 0.1)),\n              column(6, selectInput(ns(paste0(\"volume_unit_\", i)), \"Unit\", choices = c(\"µL\", \"mL\"), selected = current_data$volume_unit[i]))\n            )\n          ),\n          hr()\n        )\n      })\n    })\n    \n    # Update components data when inputs change\n    observe({\n      current_data <- components()\n      if (nrow(current_data) > 0) {\n        for (i in seq_len(nrow(current_data))) {\n          current_data$component[i] <- input[[paste0(\"component_name_\", i)]] %||% current_data$component[i]\n          current_data$input_type[i] <- input[[paste0(\"input_type_\", i)]] %||% current_data$input_type[i]\n          if (current_data$input_type[i] == \"concentration\") {\n            current_data$stock_conc[i] <- input[[paste0(\"stock_conc_\", i)]] %||% current_data$stock_conc[i]\n            current_data$stock_unit[i] <- input[[paste0(\"stock_unit_\", i)]] %||% current_data$stock_unit[i]\n            current_data$final_conc[i] <- input[[paste0(\"final_conc_\", i)]] %||% current_data$final_conc[i]\n            current_data$final_unit[i] <- input[[paste0(\"final_unit_\", i)]] %||% current_data$final_unit[i]\n            current_data$volume[i] <- NA\n            current_data$volume_unit[i] <- NA\n          } else {\n            current_data$volume[i] <- input[[paste0(\"volume_\", i)]] %||% current_data$volume[i]\n            current_data$volume_unit[i] <- input[[paste0(\"volume_unit_\", i)]] %||% current_data$volume_unit[i]\n            current_data$stock_conc[i] <- NA\n            current_data$stock_unit[i] <- NA\n            current_data$final_conc[i] <- NA\n            current_data$final_unit[i] <- NA\n          }\n        }\n        components(current_data)\n      }\n    })\n    \n    # Calculate volumes needed and create results table\n    observeEvent(input$calculate, {\n      current_data <- components()\n      req(nrow(current_data) > 0)\n      \n      # Convert total volume to µL if necessary\n      total_volume <- input$total_volume * input$num_reactions\n      if (input$volume_unit == \"mL\") {\n        total_volume <- total_volume * 1000\n      }\n      \n      volumes <- numeric(nrow(current_data))\n      \n      for (i in seq_len(nrow(current_data))) {\n        if (current_data$input_type[i] == \"concentration\") {\n          if (!is.na(current_data$stock_conc[i]) && !is.na(current_data$final_conc[i])) {\n            stock_conc <- current_data$stock_conc[i] * ifelse(current_data$stock_unit[i] == \"mM\", 1000, 1)\n            final_conc <- current_data$final_conc[i] * ifelse(current_data$final_unit[i] == \"mM\", 1000, 1)\n            volumes[i] <- (final_conc / stock_conc) * total_volume\n          } else {\n            volumes[i] <- 0\n          }\n        } else {\n          volumes[i] <- current_data$volume[i] * input$num_reactions\n          if (current_data$volume_unit[i] == \"mL\") {\n            volumes[i] <- volumes[i] * 1000\n          }\n        }\n      }\n      \n      water_volume <- total_volume - sum(volumes, na.rm = TRUE)\n      \n      # Convert volumes back to selected unit\n      if (input$volume_unit == \"mL\") {\n        volumes <- volumes / 1000\n        water_volume <- water_volume / 1000\n      }\n      \n      results <- data.frame(\n        Component = c(current_data$component, \"Water\"),\n        `Volume per Reaction` = c(round(volumes / input$num_reactions, 2), round(water_volume / input$num_reactions, 2)),\n        `Total Volume` = c(round(volumes, 2), round(water_volume, 2))\n      )\n      \n      output$results_table <- renderTable({\n        results |>\n          setNames(c(\"Component\", paste0(\"Volume per Reaction (\", input$volume_unit, \")\"), paste0(\"Total Volume (\", input$volume_unit, \")\")))\n      }, align = 'c', digits = 2)\n    })\n  })\n}\n","type":"text"},{"name":"molarity_from_mass_volume_module.R","content":"# File: molarity_from_mass_volume_module.R\n\n# Module UI\nmolarityFromMassVolumeUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    numericInput(ns(\"mass\"), \"Mass\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"mass_unit\"), \"Mass Unit\", choices = c(\"fg\", \"pg\", \"ng\", \"µg\", \"mg\", \"g\"), selected = \"µg\"),\n    numericInput(ns(\"volume\"), \"Volume\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"volume_unit\"), \"Volume Unit\", choices = c(\"fL\", \"pL\", \"nL\", \"µL\", \"mL\", \"L\"), selected = \"µL\"),\n    numericInput(ns(\"molecular_weight\"), \"Molecular Weight (g/mol)\", value = 100, min = 0, step = 1),\n    actionButton(ns(\"calculate\"), \"Calculate Molarity\"),\n    hr(),\n    h4(\"Molarity = (Mass / Molecular Weight) / Volume\"),\n    selectInput(ns(\"molarity_unit\"), \"Molarity Unit\", choices = c(\"fM\", \"pM\", \"nM\", \"µM\", \"mM\", \"M\"), selected = \"µM\"),\n    textOutput(ns(\"result\"))\n  )\n}\n\n\n# Module server\nmolarityFromMassVolumeServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    # Function to convert mass to g\n    convert_to_g <- function(value, unit) {\n      switch(unit,\n             \"fg\" = value * 1e-15,\n             \"pg\" = value * 1e-12,\n             \"ng\" = value * 1e-9,\n             \"µg\" = value * 1e-6,\n             \"mg\" = value * 1e-3,\n             \"g\" = value)\n    }\n    \n    # Function to convert volume to L\n    convert_to_L <- function(value, unit) {\n      switch(unit,\n             \"fL\" = value * 1e-15,\n             \"pL\" = value * 1e-12,\n             \"nL\" = value * 1e-9,\n             \"µL\" = value * 1e-6,\n             \"mL\" = value * 1e-3,\n             \"L\" = value)\n    }\n    \n    # Function to convert molarity to desired unit\n    convert_molarity <- function(value, unit) {\n      switch(unit,\n             \"fM\" = value * 1e-15,\n             \"pM\" = value * 1e-12,\n             \"nM\" = value * 1e-9,\n             \"µM\" = value * 1e-6,\n             \"mM\" = value * 1e-3,\n             \"M\" = value)\n    }\n    \n    observeEvent(input$calculate, {\n      mass_g <- convert_to_g(input$mass, input$mass_unit)\n      volume_L <- convert_to_L(input$volume, input$volume_unit)\n      \n      moles <- mass_g / input$molecular_weight\n      molarity <- moles / volume_L\n      \n      # Convert molarity to selected unit\n      molarity_converted <- convert_molarity(molarity, input$molarity_unit)\n      \n      output$result <- renderText({\n        paste(\"Molarity:\", round(molarity_converted, 2), input$molarity_unit)\n      })\n    })\n  })\n}\n","type":"text"},{"name":"volume_from_mass_concentration_module.R","content":"# File: volume_from_mass_concentration_module.R\n\n# File: volume_from_mass_concentration_module.R\n\nvolumeFromMassConcentrationUI <- function(id) {\n  ns <- NS(id)\n  tagList(\n    numericInput(ns(\"mass\"), \"Mass\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"mass_unit\"), \"Mass Unit\", choices = c(\"fg\", \"pg\", \"ng\", \"µg\", \"mg\", \"g\"), selected = \"µg\"),\n    numericInput(ns(\"concentration\"), \"Concentration\", value = 1, min = 0, step = 1),\n    selectInput(ns(\"concentration_unit\"), \"Concentration Unit\", choices = c(\"fg/µL\", \"pg/µL\", \"ng/µL\", \"µg/mL\", \"mg/mL\", \"g/L\"), selected = \"µg/mL\"),\n    actionButton(ns(\"calculate\"), \"Calculate Volume\"),\n    hr(),\n    h4(\"Volume = Mass / Concentration\"),\n    textOutput(ns(\"result\"))\n  )\n}\n\nvolumeFromMassConcentrationServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    # Function to convert mass to g\n    convert_to_g <- function(value, unit) {\n      switch(unit,\n             \"fg\" = value * 1e-15,\n             \"pg\" = value * 1e-12,\n             \"ng\" = value * 1e-9,\n             \"µg\" = value * 1e-6,\n             \"mg\" = value * 1e-3,\n             \"g\" = value)\n    }\n    \n    # Function to convert concentration to g/L\n    convert_to_gL <- function(value, unit) {\n      switch(unit,\n             \"fg/µL\" = value,\n             \"pg/µL\" = value,\n             \"ng/µL\" = value,\n             \"µg/mL\" = value * 1e3,\n             \"mg/mL\" = value * 1e6,\n             \"g/L\" = value * 1e9)\n    }\n    \n    observeEvent(input$calculate, {\n      mass_g <- convert_to_g(input$mass, input$mass_unit)\n      concentration_gL <- convert_to_gL(input$concentration, input$concentration_unit)\n      \n      volume_L <- mass_g / (concentration_gL / 1000)  # volume in liters\n      \n      # Determine appropriate unit for the result\n      if (volume_L < 1e-15) {\n        result <- paste(\"Volume:\", round(volume_L * 1e15, 2), \"fL\")\n      } else if (volume_L < 1e-12) {\n        result <- paste(\"Volume:\", round(volume_L * 1e12, 2), \"pL\")\n      } else if (volume_L < 1e-9) {\n        result <- paste(\"Volume:\", round(volume_L * 1e9, 2), \"nL\")\n      } else if (volume_L < 1e-6) {\n        result <- paste(\"Volume:\", round(volume_L * 1e6, 2), \"µL\")\n      } else if (volume_L < 1e-3) {\n        result <- paste(\"Volume:\", round(volume_L * 1e3, 2), \"mL\")\n      } else {\n        result <- paste(\"Volume:\", round(volume_L, 2), \"L\")\n      }\n      \n      output$result <- renderText({ result })\n    })\n  })\n}\n","type":"text"}]
